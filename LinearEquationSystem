package labgaus;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

// Класс для хранения системы уравнений и ее решения
public class LinearEquationSystem {
    private int n; // количество уравнений
    private int m; // количество неизвестных
    private double[][] A; // коэффициенты при неизвестных
    private double[] b; // свободные члены

    // Конструктор для создания объекта и чтения данных из файла
    public LinearEquationSystem(String filename) throws FileNotFoundException {
        Scanner scanner = new Scanner(new File(filename));
        n = scanner.nextInt(); // считываем количество уравнений
        m = scanner.nextInt(); // считываем количество неизвестных
        A = new double[n][m];
        b = new double[n];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m + 1; j++) {
                if (j == m) {
                    b[i] = scanner.nextDouble();
                } else {
                    A[i][j] = scanner.nextDouble();
                }
            }
        }
        scanner.close();
    }

    // Метод для приведения системы уравнений к треугольному виду
    public void toTriangleForm() {
        //1)Внешний цикл по переменной k проходит по всем строкам матрицы коэффициентов A до предпоследней строки (так как последняя строка уже будет содержать только одно уравнение с одной неизвестной).
        //2)Внутренний цикл по переменной i проходит по всем строкам A ниже текущей строки.
        //3)Для каждой строки i вычисляется коэффициент, на который нужно умножить элементы текущей строки k для того, чтобы получить нули в столбце k ниже текущей строки i. Этот коэффициент записывается в переменную ZXC (допустим)
        //4)Затем внутренний цикл по переменной j проходит по всем элементам матрицы A правее столбца k текущей строки i. Для каждого элемента A[i][j] вычитается произведение соответствующего элемента A[k][j] на коэффициент ZXC, чтобы получить ноль в строке i и столбце k.
        //5)Также вычитается произведение ZXC на свободный член b[k] из свободного члена b[i]. Это делается для того, чтобы система уравнений не изменилась, т.к. мы переставляем строки и добавляем к ним другие строки, умноженные на коэффициент.

    }

    // Метод для решения полученной треугольной системы методом обратной подстановки
    public void solve() {
        double[] x = new double[m];
        //1)Внешний цикл по переменной i проходит по строкам матрицы коэффициентов A в обратном порядке, начиная с последней строки (так как в треугольном виде последняя строка содержит уравнение с одной неизвестной).
        //2)Для каждой строки i вычисляется сумма произведений значений неизвестных x[j], где j пробегает по столбцам правее столбца i. Эта сумма используется для вычисления значения неизвестной x[i].
        //3)Затем для неизвестной x[i] вычисляется значение, равное разности свободного члена b[i] и суммы, которую мы только что вычислили, деленной на соответствующий элемент матрицы коэффициентов A[i][i].
        //4)После выполнения этого метода массив x будет содержать решение системы уравнений.

        // Проверяем наличие решения и выводим результат
        if (A[m - 1][m - 1] == 0 && b[m - 1] == 0) {
            System.out.println("Система вырожденная"); //проверяет, является ли система вырожденной, т.е. все коэффициенты в последней строке матрицы коэффициентов равны нулю, а соответствующий свободный член тоже равен нулю
        } else if (A[m - 1][m - 1] == 0 && b[m - 1] != 0) {
            System.out.println("Нет решений");// проверяет, совпадает ли последний элемент главной диагонали матрицы коэффициентов A с нулем, а соответствующий свободный член b[m-1] не равен нулю
        } else if (A[m - 1][m - 1] != 0 && n < m) {
            System.out.println("Решений бесконечно много");//проверяет, является ли система неопределенной, т.е. количество уравнений меньше количества неизвестных.
        } else {
            System.out.println("Решение:");//Если все предыдущие условия не выполнились, значит система имеет единственное решение
            for (int i = 0; i < m; i++) {
                System.out.printf("%.6f\n", x[i]);
            }
        }
    }

    // Метод для вывода исходной системы уравнений
    public void printSystem() {
        System.out.println("Исходная система уравнений:");
        //1)Внешний цикл по переменной i проходит по всем строкам матрицы коэффициентов A.
        //2)Внутренний цикл по переменной j проходит по всем столбцам матрицы A.
        //3)Для каждого элемента A[i][j] выводится его значение в формате с 6 знаками после десятичной точки, разделенное пробелом с предыдущим элементом в строке. Затем выводится равенство и соответствующий свободный член b[i] в том же формате с переводом строки.

    }

    // Метод для вывода системы уравнений, приведенной к треугольному виду
    public void printTriangleForm() {
        System.out.println("Система, приведенная к треугольному виду:");

        //Аналогично методу printSystem

    }
}
